trigger:
- master

resources:
- repo: self

variables:
  dockerRegistryServiceConnection: '0b24e5a0-365e-498c-8751-3fe89e16ffa3'
  imageRepository: 'tthoudamazurevotingappredis'
  containerRegistry: 'crlbgvoteapptestuks2.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/azure-vote/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'acrpullsecret'
  k8sServiceConnection: 'aks-lbg-test-voting-app'
  k8sNamespace: 'votingapp'

pool:
  name: az-selfhosted
stages:
- stage: CI
  displayName: Build, push, publish stage
  jobs:
  - job: Build
    displayName: Build
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
    - bash: |
       echo "##vso[task.setvariable variable=voteAppId;isOutput=true]voteapp_$(Build.BuildId)_$(date '+%d%m%Y_%H_%M_%S')"
      name: appId
  - job: GenerateManifest
    displayName: Copy File and Generate Manifest
    dependsOn: Build
    variables:
      voteAppId: $[ dependencies.Build.outputs['appId.voteAppId'] ]
    steps:
    - task: Bash@3
      displayName: Rename file
      inputs:
        targetType: 'inline'
        script: |
          mv azure-vote-all-in-one-redis.yaml $(voteAppId).yaml
    - task: CopyFiles@2
      displayName: Copy files
      inputs:
        Contents: $(voteAppId).yaml
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
    - task: PublishPipelineArtifact@1
      inputs:
        artifactName: 'manifests'
        path: 'manifests'

- stage: CD
  dependsOn: CI
  displayName: Deploy to AKS
  #condition: eq(variables['build.sourceBranch'], 'refs/heads/master'))
  jobs:
  - job: Deploy
    displayName: Deploy to Kubernetes
    variables:
      - name: voteAppId
        value: $[ stageDependencies.CI.Build.outputs['appId.voteAppId'] ]
    steps:
    - task: DownloadPipelineArtifact@2
      inputs:
        artifactName: 'manifests'
        downloadPath: '$(System.ArtifactsDirectory)/manifests'
    - task: KubernetesManifest@0
      displayName: Create Image Pull Secret
      inputs:
        action: 'createSecret'
        kubernetesServiceConnection: $(k8sServiceConnection)
        namespace: $(k8sNamespace)
        secretType: 'dockerRegistry'
        secretName: $(imagePullSecret)
        dockerRegistryEndpoint: '$(dockerRegistryServiceConnection)'
    - task: KubernetesManifest@0
      displayName: Deploy to Kubernetes cluster
      inputs:
        action: deploy
        kubernetesServiceConnection: $(k8sServiceConnection)
        namespace: $(k8sNamespace)
        manifests: |
          $(System.ArtifactsDirectory)/manifests/$(voteAppId).yaml
        imagePullSecrets: |
          $(imagePullSecret)
        containers: |
          $(containerRegistry)/$(imageRepository):$(tag)
